<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="button8.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>